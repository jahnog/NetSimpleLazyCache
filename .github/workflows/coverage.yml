name: Code Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Test with Coverage
      run: |
        # Create coverage directory first
        mkdir -p ./coverage
        
        # Run tests with coverage and output to test directory
        dotnet test --configuration Release --no-build \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=cobertura \
          /p:CoverletOutput=./coverage.cobertura.xml \
          /p:Include="[SimpleLazyCache]*" \
          /p:Exclude="[*.Tests]*"
    
    - name: Debug Coverage Files
      run: |
        echo "=== Looking for coverage files ==="
        find . -name "*.cobertura.xml" -type f || echo "No cobertura.xml files found"
        echo "=== Test directory structure ==="
        ls -la test/*/
        echo "=== Coverage directory ==="
        ls -la coverage/ || echo "Coverage directory not found"
    
    - name: Locate and Copy Coverage File
      run: |
        # Ensure coverage directory exists
        mkdir -p ./coverage
        
        # Find the actual coverage file generated by the test
        COVERAGE_FILE=$(find ./test -name "coverage.cobertura.xml" | head -1)
        
        if [ -n "$COVERAGE_FILE" ]; then
          echo "üìä Found coverage file: $COVERAGE_FILE"
          cp "$COVERAGE_FILE" ./coverage/coverage.cobertura.xml
          echo "‚úÖ Copied to ./coverage/coverage.cobertura.xml"
          
          # Verify the file exists and has content
          if [ -f "./coverage/coverage.cobertura.xml" ] && [ -s "./coverage/coverage.cobertura.xml" ]; then
            echo "‚úÖ Coverage file verified at ./coverage/coverage.cobertura.xml"
            echo "üìè File size: $(wc -c < ./coverage/coverage.cobertura.xml) bytes"
          else
            echo "‚ùå Coverage file is missing or empty!"
            exit 1
          fi
        else
          echo "‚ùå No coverage file found in test directories!"
          echo "Available files:"
          find . -name "*.cobertura.xml" -type f || echo "No cobertura.xml files found anywhere"
          exit 1
        fi
    
    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
      
    - name: Generate Coverage Report
      run: |
        # Verify coverage file exists before generating report
        if [ ! -f "./coverage/coverage.cobertura.xml" ]; then
          echo "‚ùå Coverage file not found at ./coverage/coverage.cobertura.xml"
          exit 1
        fi
        
        echo "üìà Generating coverage reports..."
        mkdir -p ./coverage/report
        
        reportgenerator \
          -reports:"./coverage/coverage.cobertura.xml" \
          -targetdir:"./coverage/report" \
          -reporttypes:"Html;Badges;TextSummary;MarkdownSummary;MarkdownSummaryGithub" \
          -title:"NetSimpleLazyCache Coverage Report"
        
        echo "‚úÖ Coverage reports generated successfully"
        
        # List generated files for debugging
        echo "Generated report files:"
        ls -la ./coverage/report/ || echo "No report files found"
    
    - name: Update Coverage Badges
      run: |
        echo "üèÜ Updating coverage badges..."
        if [ -f "./coverage/report/badge_linecoverage.svg" ]; then
          cp "./coverage/report/badge_linecoverage.svg" "./badge_linecoverage.svg"
          cp "./coverage/report/badge_branchcoverage.svg" "./badge_branchcoverage.svg" 
          cp "./coverage/report/badge_methodcoverage.svg" "./badge_methodcoverage.svg"
          echo "‚úÖ Coverage badges updated"
        else
          echo "‚ö†Ô∏è Coverage badges not found"
        fi
    
    - name: Commit Updated Badges
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add badge_*.svg || true
        git diff --staged --quiet || {
          git commit -m "Update coverage badges [skip ci]"
          git push
        }
    
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          ./coverage/report/
          ./coverage/coverage.cobertura.xml
    
    - name: Coverage Summary
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
        
        # Find and use the generated text summary
        SUMMARY_FILE="./coverage/report/Summary.txt"
        if [ -f "$SUMMARY_FILE" ]; then
          LINE_COV=$(grep "Line coverage:" "$SUMMARY_FILE" | grep -o '[0-9]*\.[0-9]*%\|[0-9]*%' || echo "N/A")
          BRANCH_COV=$(grep "Branch coverage:" "$SUMMARY_FILE" | grep -o '[0-9]*\.[0-9]*%\|[0-9]*%' || echo "N/A")
          METHOD_COV=$(grep "Method coverage:" "$SUMMARY_FILE" | grep -o '[0-9]*\.[0-9]*%\|[0-9]*%' || echo "N/A")
          echo "| Line Coverage | $LINE_COV |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch Coverage | $BRANCH_COV |" >> $GITHUB_STEP_SUMMARY  
          echo "| Method Coverage | $METHOD_COV |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Detailed Coverage Information" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat "$SUMMARY_FILE" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Line Coverage | Unable to determine |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch Coverage | Unable to determine |" >> $GITHUB_STEP_SUMMARY  
          echo "| Method Coverage | Unable to determine |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è Summary file not found at: $SUMMARY_FILE" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Check Coverage Threshold
      run: |
        # Fail if line coverage is below 95%
        echo "üéØ Checking coverage thresholds..."
        dotnet test --configuration Release --no-build \
          /p:CollectCoverage=true \
          /p:Threshold=95 \
          /p:ThresholdType=line \
          /p:ThresholdStat=total \
          /p:Include="[SimpleLazyCache]*" \
          /p:Exclude="[*.Tests]*" || {
            echo "‚ùå Coverage threshold check failed!"
            echo "Required: 95% line coverage minimum"
            exit 1
          }
        echo "‚úÖ Coverage thresholds passed!"
